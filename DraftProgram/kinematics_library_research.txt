順・逆運動学を解くのに使えそうなライブラリの調査
・pinocchio: https://github.com/stack-of-tasks/pinocchio
　・最新リリース: Pinocchio 2.6.12 _Nov 6
　・Pythonインターフェイス有り(pip or conda)。C++(98/03/11/14/17/20)の場合はHeader only
　・線形代数のEigenと、衝突検出のFCLに基づいて構築
　・C++ template library
　・CppADCodeGenでの自動コード生成をサポート
　・順運動学、順・逆動力学（RNEA? etc?）、重心動力学。それぞれの解析的導関数。
　・ROS2 Foxy, Humble. Rolling にも対応。
　・モデルはURDFやSDF
　・ドキュメントが超充実している。サンプルコード(C++, Python)もある。https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/index.html
　　・逆運動学の例(閉ループモデル＝数値解法): https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/md_doc_b-examples_i-inverse-kinematics.html#autotoc_md63
　　・例では、Levenberg Marquardt法の、Singularity-Robust inverse法で、各残渣に関する任意の重み正定値行列Weを１として、負にしたもので、修正角運動量を求めている。
　・インストールはココ。aptから。https://stack-of-tasks.github.io/pinocchio/download.html
　・2008, Roy Featherstone, 『Rigid Body Dynamics Algorithms』から影響を受けている。https://link.springer.com/book/10.1007/978-1-4899-7560-7
　　・この著者が開発したアルゴリズムが、Articulated Body Algorithm (ABA)。
　　・Amazon: https://www.amazon.co.jp/Rigid-Body-Dynamics-Algorithms-Featherstone/dp/0387743146
　　
・RBDL: https://github.com/rbdl/rbdl
　・最新リリース: RBDL v3.2.1 _Aug 17
　・Kinematic chains and 分岐モデルの順・逆動力学（RNEA, CRBA, ABA）、順・逆運動学、ヤコビアンの計算、接触と衝突処理の成約、閉ループモデルのコードが含まれている。
　・モデルは、URDF or Lua
　・ROSには未対応？CMake周りを設定してやれば通るのだろうが。
　・言語、C++, Python(wapper)
　・ドキュメントも、必要なことが書かれている。pinocchioほどではない。https://rbdl.github.io/index.html
　・外部依存関係はないが、数学ライブラリのEigen3を使えば最適なパフォーマンスが得られる。別途必要。
　・インストールは、git cloneからのscript起動。
　・2008, Roy Featherstone, 『Rigid Body Dynamics Algorithms』から影響を受けている。https://link.springer.com/book/10.1007/978-1-4899-7560-7

・Eigen3: https://eigen.tuxfamily.org/index.php?title=Main_Page
　・線形代数のC++ template library

・qpOASES: https://github.com/coin-or/qpOASES, https://www.coin-or.org/qpOASES/doc/3.2/doxygen/index.html
　・オンライン・アクティブセット法を実装するライブラリ
　・C++


逆運動学: 数値解法での、角度修正量の解法比較
（参考: 高橋直樹, 林原靖男, "ヒューマノイドロボットを対象とした逆運動学の性能比較"）
（　　　梶田秀司, "ヒューマノイドロボット（改訂２版）"）
・Newton-Raphson法
　・梶田氏の書籍で示されていた方法。ヤコビアンとラムダ（０〜１）変数とerrだけの簡単な式。特異点になると発散する。コレに対応するために、最終的にLMSR法の、各残差に関する重みW_eが無い（つまり単位行列）バージョンになる。
　・特異点時に発散してもいいなら、この方式でも良いかもしれない。コストはわからない。
・Jacobian Transpose(JT)法
　・残差ベクトルを小さくするために、いくつかの条件がある方法。特異値まわりでも安定した関節角が得られるが、収束性能が悪いことから反復計算が多く必要。
　・リンクの長いほど収束がしやすいから、ROBOTIS OP2には向かない。
　・所望の位置より関節角の安定性を優先したいときに有効。
・Least Squares(LS)法、Gauss Newton(GN)法
　・疑似逆行列を使わない方法、特異値分解を使う方法、QR分解を使う方法だと、QR分解を使う方法が１番計算速度が早かった。
　・到達不可能だったり特異点からの復帰だと、発散する。
　・到達可能な範囲で使う場合に有効。
・Levenberg Marquard(LM)法
　・Singularity-Robust inverse(LMSR)法
　　・特異点からの脱出は、リンク長が短い場合に可能。
　　・到達可能な範囲であれば、特異点からの脱出を含めて適している。
　・Error Damped(LMED)法
　・Improve Error Damped(LMIED)法
　　・LM法では最も安定した解が得られた。
　　・LM法では唯一、到達不可能な解が収束する。
　　・到達不可能な解を含んで安定した解がほしいなら適している。
・Using QP solver(qpOASES)
　・GN法
　　・到達可能な範囲では高速に収束する。到達不可能な範囲では残差や関節角共に発散する。
　　・特異点から脱出できなかった。
　　・LM法と比べて、不等式成約を考慮できること以外に有利な点は無い。
　・LM法
　　・JT法と似たような特性。
　　・リンク長が短い場合は、特異点から脱出できた。

ー＞LMSR法が魅力的。より多くのモデルに対応するなら、LMIED法が広範囲に対応できそう？ただ、計算コストが重い。